name: Build and Package Release

on:
  push:
    branches: [main, master, release, dev]  # Restrict to specific branches
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

# Set explicit permissions (principle of least privilege)
permissions:
  contents: write  # Needed to create releases
  packages: read   # Read-only for packages is sufficient
  actions: read    # Needed to use artifacts

# Prevent concurrent workflow runs to avoid race conditions
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent long-running jobs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for security and performance
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Get short commit ID
      id: get_commit
      run: echo "SHORT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Determine filename prefix
      id: filename
      run: |
        BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
        if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "release" ]]; then
          echo "PREFIX=release" >> $GITHUB_OUTPUT
        else
          echo "PREFIX=dev" >> $GITHUB_OUTPUT
        fi
    
    # Set npm ci to use --no-audit for speed and --no-fund to avoid funding messages
    - name: Install dependencies
      run: npm ci --no-audit --no-fund
    
    # - name: Fix security vulnerabilities
    #   run: npm audit fix --force
    #   continue-on-error: true  # Don't fail if fixes can't be applied
    
    # # Update the security audit step to be more detailed
    # - name: Run security audit
    #   run: |
    #     echo "Running npm audit with detailed output"
    #     npm audit --production --json > audit_results.json || true
    #     echo "Security audit completed. Checking for high severity issues only..."
        
    #     # Only fail on high or critical severity issues
    #     high_critical_count=$(cat audit_results.json | grep -c '"severity":"high\|critical"' || echo "0")
    #     if [ "$high_critical_count" -gt "0" ]; then
    #       echo "::error::Found $high_critical_count high or critical severity vulnerabilities"
    #       echo "Vulnerable packages:"
    #       cat audit_results.json | grep -A 5 '"severity":"high\|critical"'
    #       exit 1
    #     else
    #       echo "No high or critical vulnerabilities found"
    #     fi
    
    - name: Build React app
      run: npm run build
      
    - name: Find build directory
      id: build-dir
      run: |
        if [ -d "dist" ]; then
          echo "BUILD_DIR=dist" >> $GITHUB_OUTPUT
        elif [ -d "build" ]; then
          echo "BUILD_DIR=build" >> $GITHUB_OUTPUT
        else
          echo "No build directory found. Creating dist directory."
          mkdir -p dist
          echo "BUILD_DIR=dist" >> $GITHUB_OUTPUT
        fi
      
    - name: Copy deployment scripts to build directory
      run: |
        # Validate script files exist before copying
        if [ -f "build-image.sh" ] && [ -f "runs-image.sh" ]; then
          cp build-image.sh ${{ steps.build-dir.outputs.BUILD_DIR }}/
          cp runs-image.sh ${{ steps.build-dir.outputs.BUILD_DIR }}/
          chmod +x ${{ steps.build-dir.outputs.BUILD_DIR }}/build-image.sh ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.sh
        else
          echo "Warning: One or more script files not found. Creating placeholder files."
          echo "#!/bin/bash" > ${{ steps.build-dir.outputs.BUILD_DIR }}/build-image.sh
          echo "docker build -t ai-agent-ui ." >> ${{ steps.build-dir.outputs.BUILD_DIR }}/build-image.sh
          echo "#!/bin/bash" > ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.sh
          echo "docker run -d -p 8080:80 -t ai-agent-ui" >> ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.sh
          chmod +x ${{ steps.build-dir.outputs.BUILD_DIR }}/build-image.sh ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.sh
        fi
        
        # Create Windows batch versions - use > instead of >> for first line
        echo "@echo off" > ${{ steps.build-dir.outputs.BUILD_DIR }}/build-image.bat
        echo "docker build -t ai-agent-ui ." >> ${{ steps.build-dir.outputs.BUILD_DIR }}/build-image.bat
        
        echo "@echo off" > ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.bat
        echo "docker stop ai-agent-ui 2>nul" >> ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.bat
        echo "docker rm ai-agent-ui 2>nul" >> ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.bat
        echo "docker run -d -p 8080:80 --name ai-agent-ui ai-agent-ui" >> ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.bat
        echo "echo The application is now running at http://localhost:8080" >> ${{ steps.build-dir.outputs.BUILD_DIR }}/runs-image.bat
    
    - name: Create Dockerfile in build directory
      run: |
        # Use secure base image with pinned version
        cat > ${{ steps.build-dir.outputs.BUILD_DIR }}/Dockerfile << 'EOF'
        FROM nginx:1.25.3-alpine
        
        # Create a non-root user to run nginx
        RUN adduser -D -u 1000 nginxuser && \
            chown -R nginxuser:nginxuser /var/cache/nginx && \
            touch /var/run/nginx.pid && \
            chown -R nginxuser:nginxuser /var/run/nginx.pid
        
        # Copy application files
        COPY . /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        
        # Set secure headers
        RUN echo 'server_tokens off;' > /etc/nginx/conf.d/security.conf
        
        # Run as non-root user
        USER nginxuser
        
        # Expose port
        EXPOSE 80
        
        # Start nginx
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
        # Create nginx.conf with security headers and proper SPA routing
        cat > ${{ steps.build-dir.outputs.BUILD_DIR }}/nginx.conf << 'EOF'
        server {
            listen 80;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
            
            # Security headers with updated CSP to allow connections to external APIs
            add_header X-Content-Type-Options "nosniff";
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' http://127.0.0.1:11434 http://localhost:11434 https://* http://*";
            
            # Serve static files directly
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 30d;
                add_header Cache-Control "public, no-transform";
                try_files $uri =404;
            }
            
            # Deny access to .git directories and sensitive files
            location ~ /\.(?!well-known).* {
                deny all;
            }
            
            # This is the key change - all non-file routes go to index.html
            location / {
                try_files $uri $uri/ /index.html;
            }
        }
        EOF
        
    - name: Create README for deployment
      run: |
        cat > ${{ steps.build-dir.outputs.BUILD_DIR }}/README.md << 'EOF'
        # AI Agent UI - Deployment Package
        
        This package contains the built AI Agent UI application and scripts to deploy it using Docker.
        
        ## Quick Start
        
        ### Linux/macOS:
        
        ```bash
        # Build the Docker image
        ./build-image.sh
        
        # Run the Docker container
        ./runs-image.sh
        ```
        
        ### Windows:
        
        ```
        # Build the Docker image
        build-image.bat
        
        # Run the Docker container
        runs-image.bat
        ```
        
        The application will be available at http://localhost:8080
        
        ## Requirements
        
        - Docker must be installed on your system
        
        ## Contents
        
        - Static web files (HTML, CSS, JS)
        - Dockerfile
        - nginx.conf
        - Deployment scripts for Linux/macOS and Windows
        
        ## Security Notes
        
        - The Dockerfile runs Nginx as a non-root user
        - Security headers are configured in nginx.conf
        - The container is based on the Alpine distribution for a minimal attack surface
        EOF
    
    - name: Create zip file with commit ID
      run: |
        ZIP_FILENAME="${{ steps.filename.outputs.PREFIX }}_${{ steps.get_commit.outputs.SHORT_COMMIT }}.zip"
        cd ${{ steps.build-dir.outputs.BUILD_DIR }}
        zip -r "../$ZIP_FILENAME" * -x "*.git*" -x "*.env*"  # Exclude potentially sensitive files
        cd ..
        
        # Verify zip was created successfully
        if [ ! -f "$ZIP_FILENAME" ]; then
          echo "Error: ZIP file was not created correctly"
          exit 1
        fi
        
        ls -la  # Debug: List files in the directory
        echo "ZIP_FILENAME=$ZIP_FILENAME" >> $GITHUB_ENV
    
    # Store zip as artifact with retention limit
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_FILENAME }}
        path: ${{ env.ZIP_FILENAME }}
        retention-days: 30  # Limit retention period for security
        
    # Manual Release (via workflow_dispatch)
    - name: Create versioned GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ZIP_FILENAME }}
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        draft: false
        prerelease: false
        body: |
          ## AI Agent UI Release v${{ github.event.inputs.version }}
          
          This release contains the built application with Docker deployment scripts.
          
          ### Installation
          1. Download the zip file
          2. Extract the contents
          3. Run `./build-image.sh` (or `build-image.bat` on Windows)
          4. Run `./runs-image.sh` (or `runs-image.bat` on Windows)
          
          The application will be available at http://localhost:8080
          
          ### Security Features
          - Non-root Nginx container
          - Security headers configured
          - Alpine-based minimal image
    
    # Automatic Release (for specific branches only)
    - name: Create automatic GitHub Release
      if: |
        github.event_name == 'push' && 
        (github.ref == 'refs/heads/main' || 
         github.ref == 'refs/heads/master' || 
         github.ref == 'refs/heads/release' || 
         (github.ref == 'refs/heads/dev' && contains(github.event.head_commit.message, '[release]')))
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ZIP_FILENAME }}
        tag_name: ${{ steps.filename.outputs.PREFIX }}-${{ steps.get_commit.outputs.SHORT_COMMIT }}
        name: ${{ steps.filename.outputs.PREFIX }} build ${{ steps.get_commit.outputs.SHORT_COMMIT }}
        draft: false
        prerelease: ${{ steps.filename.outputs.PREFIX == 'dev' }}
        body: |
          ## Automated ${{ steps.filename.outputs.PREFIX }} build
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Build date: ${{ github.event.head_commit.timestamp }}
          
          ### Security Notes
          - This build includes security headers and runs as a non-root user
          - The Docker image is based on the Alpine distribution for minimal attack surface
          - Content Security Policy is configured to prevent XSS attacks